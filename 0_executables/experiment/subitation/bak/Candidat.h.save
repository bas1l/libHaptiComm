/*
 * Candidat.h
 *
 *  Created on: 14 janv. 2019
 *      Author: Basil Duvernoy
 */

#include <array>    // std::array
#include <algorithm>// std::random_shuffle
#include <cstring>
#include <chrono>   // std::clock, std::chrono::high_resolution_clock::now
#include <bitset> 	// to check bit value on number
#include <dirent.h> // readdir
#include <iostream> // std::cin, std::cout 
#include <sstream>  // std::istringstream
#include <fstream>  // std::ifstream
#include <map> 		// expEnums order variable
#include <math.h>   // pow
#include <utility>  // pair
#include <stdlib.h> // atoi, rand
#include <stdio.h>  // remove and rename files
#include <string>
#include <sys/stat.h>
#include <sys/types.h>
#include <vector>
using namespace std;

// boost library for vocal recognition
#include <boost/filesystem.hpp>
using namespace boost::filesystem;

#ifndef CANDIDAT_H_
#define CANDIDAT_H_


enum expEnum {BrailleDev=10, Fingers=20, Buzzer=30};
typedef std::chrono::duration<double, milli> td_msec;

class Candidat {
public:
	// Create the structure of the candidat
	Candidat(string _pathDirectory, string _firstname, string _lastname);
	// Destroy the candidat object
	virtual ~Candidat();

	// check if the candidat already exist
	bool exist();
	// create the candidat
	bool create();
	// load the candidat from the path directory variable
	bool loadFromDB();
	// return if there is a next experiment
	bool isNextExp();
	// return the next experiment to execute
	expEnum nextExp();
	// return the next experiment to execute
	bool saveResults(vector<std::array<td_msec, 3>>* timers, vector<int> * answers);
	
	
	// getters:
	int 					getId();
	string 					getFirstname();
	string 					getLastname();
	vector<pair<bool, expEnum>> getExpeOrder();
	vector<vector<int>> 	getSequence();
	string 					getPathDirectory();






private:
	int id; // id of the candidat
	string firstname; // firstname of the candidat
	string lastname; // lastname of the candidat
	
	int a,i,j,r,s; // classic iteration variables
	int nextit; // iteration variable of (???)
	int nba; // NumBer of Actuators
	int nbr; // NumBer of Repetition by subgroup of stimuli
	vector<pair<bool, expEnum>> expeOrder; // the ordered expEnums and the bool statement aknowleding if it has been done already	
	vector<vector<int>> apc; // sequence of All the Possible Combinaisons for the expEnums	
	vector<vector<int>> seq; // SEQuence of the stimuli for the expEnums	
		
	string pathDirectory; // path of the main directory of candidat
	string candidatsListFile;
	string infoFile;
	
	// setters
	bool setId(int _id);
	bool setName(string fn, string ln);
	bool setExpeOrder();
	bool setSequence();
	bool setPathDirectory(string p);
	// initialisation
	bool initexpVariables();
	bool initapc();
	bool initseq();
	bool initexpeOrder();
	bool saveInfo();
	// tools
	string expstring(expEnum ee);
	expEnum str2expEnum(string eestr);
	bool copyDir(boost::filesystem::path const & source, boost::filesystem::path const & destination);
	



};






#endif /* CANDIDAT_H_ */







